
// <copyright file="Class1.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>11/13/2018 11:48:47 AM</date>
// <summary>Implements the AccountDuplicateChecker Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using System.Activities.Statements;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk.Query;

namespace CRMTraining2.Workflows
{
    public class AccountDuplicateChecker: WorkFlowActivityBase
    {
       [Input("EntityReference input")]
        [ReferenceTarget("account")]
        [Default("00000000-0000-0000-0000-000000000000", "account")]
        public InArgument<EntityReference> AccountReference { get; set; }

        [Output("Bool output")]
        [Default("false")]
        public OutArgument<bool> PossibleDuplicate { get; set; }

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }
            crmWorkflowContext.Trace("Starting workflow activity");

            try
            {
                var newAccount = crmWorkflowContext.OrganizationService.Retrieve("account",
                    this.AccountReference.Get(executionContext).Id, new ColumnSet("name"));
                var numberOfAccounts = 0;
                if (newAccount != null)
                {
                    var newAccountName = newAccount.GetAttributeValue<String>("name");
                    crmWorkflowContext.Trace($"Account name is {newAccountName}");

                    var q1 = new QueryExpression("account")
                    {
                        ColumnSet = new ColumnSet(),
                        Criteria = new FilterExpression
                        {
                            Conditions =
                            {
                                new ConditionExpression()
                                {
                                    AttributeName = "name",
                                    Operator = ConditionOperator.Equal,
                                    Values = {newAccountName},
                                }
                            },
                        }
                    };

                    var result = (EntityCollection)crmWorkflowContext.OrganizationService.RetrieveMultiple(q1);

                    numberOfAccounts = result.Entities.Count;

                    crmWorkflowContext.Trace($"Number of duplicates is {numberOfAccounts}");

                    if (numberOfAccounts > 1)
                    {
                        crmWorkflowContext.Trace($"Possible duplicate found, set output parameter to true");
                        PossibleDuplicate.Set(executionContext, true);
                    }
                    else
                    {
                        crmWorkflowContext.Trace($"No duplicates, set output to false");
                        PossibleDuplicate.Set(executionContext, false);
                    }
                }
                else
                {
                    throw new ArgumentException("Account parameter not set");
                }
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                // Handle the exception.
                throw e;
            }

        }
         

    }

}
