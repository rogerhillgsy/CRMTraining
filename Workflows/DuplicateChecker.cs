
// <copyright file="DuplicateChecker.cs" company="">
// Copyright (c) 2019 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/15/2019 5:01:53 PM</date>
// <summary>Implements the DuplicateChecker Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using System.Diagnostics;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk.Query;

namespace CRMTraining2.Workflows
{


    /// </summary>    
    public class DuplicateChecker: WorkFlowActivityBase
    {

         
        #region Properties 
        //Property for Entity account
        //[RequiredArgument]
        //[Input("EntityReference input")] 
        //[ReferenceTarget("account")]
        //public InArgument<EntityReference> AccountReference { get; set; }

        [Output("Bool output")]
        public OutArgument<bool> PossibleDuplicate { get; set; }
        #endregion
        

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {
            var tracingService = executionContext.GetExtension<ITracingService>();

            tracingService.Trace("Starting Duplicate checker code activity");
            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

	        try
	        {
                // tracingService.Trace($"input parameter target keys are {string.Join(",", crmWorkflowContext.WorkflowExecutionContext.InputParameters.Keys)}");
                tracingService.Trace($"input parameter keys are {string.Join(",", crmWorkflowContext.WorkflowExecutionContext.PreEntityImages.Keys)}");
                // var target = (Entity) crmWorkflowContext.WorkflowExecutionContext.InputParameters["Target"];
                var target = (Entity) crmWorkflowContext.WorkflowExecutionContext.PreEntityImages["account"];
                if (target != null)
                {
                    tracingService.Trace($"Does target have name attribute? {target.Attributes.ContainsKey("name")}");
                    tracingService.Trace($"Found target name {target.GetAttributeValue<string>("name")}");

                    var n = CountDuplicateAccounts("name", crmWorkflowContext.OrganizationService);

                    tracingService.Trace($"Duplicate account count = {n}");

                    if (n > 0)
                    {
                        PossibleDuplicate.Set(executionContext,true);
                    }
                    else
                    {
                        PossibleDuplicate.Set(executionContext, false);
                    }
                }
                else
                {
                    tracingService.Trace($"Cannot find target account in execution context");
                }

            }
            catch (FaultException<OrganizationServiceFault> e)
            {                
                // Handle the exception.
                tracingService.Trace($"Duplicate Checker Fault {e.Message}");
                throw e;
            }	  

        }


        /// <summary>
        /// Check for duplicate accounts. Public to allow for duplicate checking.
        /// </summary>
        /// <param name="v"></param>
        public int CountDuplicateAccounts(string newAccountName, IOrganizationService service)
        {
            var qe = new QueryExpression("account")
            {
                Criteria = new FilterExpression
                {
                    Conditions = { new ConditionExpression
                    {
                        AttributeName = "name",
                        Operator = ConditionOperator.Equal,
                        Values = { newAccountName}
                    }}
                },
                ColumnSet = new ColumnSet("accountid"),
            };

            var result = service.RetrieveMultiple(qe);

            return result.Entities.Count;
        }
    }

}
