
// <copyright file="DetectDuplicate2.cs" company="">
// Copyright (c) 2019 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/16/2019 9:34:38 AM</date>
// <summary>Implements the DetectDuplicate2 Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Activities;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Workflow;

namespace CRMTraining2.Workflows
{


    /// </summary>    
    public class DuplicateChecker : WorkFlowActivityBase
    {


        #region Properties 
        //Property for Entity account
        [Output("Bool output")]
        public OutArgument<bool> PossibleMatch { get; set; }
        #endregion


        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="WorkFlowActivityBase.LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {
            var tracingService = crmWorkflowContext.TracingService;
            tracingService.Trace("Starting DetectDuplicate2 workflow activity");

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            try
            {
                tracingService.Trace($"Pre entity images {string.Join(",", crmWorkflowContext.WorkflowExecutionContext.PreEntityImages.Keys)}");
                var target = (Entity)crmWorkflowContext.WorkflowExecutionContext.PreEntityImages["account"];

                tracingService.Trace($"Target attributes are:{string.Join(",", target.Attributes.Keys)}");
                tracingService.Trace($"Target name is {target["name"]}");

                var duplicates = NumberOfDuplicates(crmWorkflowContext.OrganizationService,
                    target.GetAttributeValue<string>("name"));
                tracingService.Trace($"Number of duplicates {duplicates}");

                if (duplicates > 0)
                {
                    PossibleMatch.Set(executionContext, true);
                }
                else
                {
                    PossibleMatch.Set(executionContext, false);
                }

            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                // Handle the exception.
                throw e;
            }

        }

        public int NumberOfDuplicates(IOrganizationService service, string name)
        {
            var qe = new QueryExpression("account")
            {
                Criteria = new FilterExpression
                {
                    Conditions =
                    {
                        new ConditionExpression
                        {
                            AttributeName = "name",
                            Operator = ConditionOperator.Equal,
                            Values = {name}
                        }
                    },
                },
                ColumnSet = new ColumnSet(),
            };

            var result = service.RetrieveMultiple(qe);

            return result.Entities.Count;
        }


    }

}
